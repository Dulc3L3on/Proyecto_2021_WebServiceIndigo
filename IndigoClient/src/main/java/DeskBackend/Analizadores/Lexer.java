// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexer.jflex

/*primer secci√≥n: imports*/
package DeskBackend.Analizadores;
import java_cup.runtime.*;
import static DeskBackend.Analizadores.Parser_IndigoSym.*;
import DeskBackend.Entidades.EntidadError;
import DeskBackend.Entidades.Token;
import DeskBackend.Entidades.Herramientas.ListaEnlazada;
import DeskBackend.Entidades.Manejadores.ManejadorErrores;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int VALORES = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\41\0\1\1\1\2\1\3\1\4\7\3\1\5\1\6"+
    "\1\7\1\3\12\10\1\5\1\0\1\11\1\12\1\13"+
    "\1\3\1\0\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\0\1\46\1\0"+
    "\1\47\1\0\2\44\1\50\1\51\1\52\1\53\2\44"+
    "\1\54\2\44\1\55\1\44\1\56\1\57\3\44\1\60"+
    "\1\61\1\62\5\44\1\46\1\3\1\46\43\0\1\3"+
    "\35\0\1\3\u0140\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\2\2\23\4\1\10\1\11\3\4\1\12\12\4\1\6"+
    "\1\4\1\7\1\2\21\4\1\13\6\4\1\14\2\4"+
    "\1\15\5\4\1\14\3\4\1\16\13\4\2\7\52\4"+
    "\1\17\2\4\1\7\3\4\1\20\13\4\1\21\5\4"+
    "\1\16\16\4\1\22\6\4\1\7\3\4\1\23\6\4"+
    "\1\24\11\4\1\25\15\4\1\26\24\4\1\27\17\4"+
    "\1\30\2\4\1\16\6\4\1\30\2\4\1\31\3\4"+
    "\1\17\1\4\1\32\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\146\0\231\0\314\0\231"+
    "\0\377\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\231"+
    "\0\314\0\u0594\0\u05c7\0\u05fa\0\146\0\u062d\0\u0660\0\u0693"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\146"+
    "\0\u082b\0\u085e\0\146\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\231\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\231\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\231\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\231\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u082b\0\u1188\0\u11bb\0\u11ee"+
    "\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\231\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\231"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\231\0\u1d7c\0\u1daf\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\231\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa"+
    "\0\u22dd\0\u2310\0\u2343\0\231\0\u2376\0\u23a9\0\u23dc\0\u240f"+
    "\0\u2442\0\u2475\0\231\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\231\0\u2673\0\u26a6\0\u26d9"+
    "\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871"+
    "\0\u28a4\0\u28d7\0\231\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6"+
    "\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e"+
    "\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\231"+
    "\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b"+
    "\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003"+
    "\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b"+
    "\0\u31ce\0\231\0\u3201\0\u3234\0\231\0\u3267\0\u329a\0\u32cd"+
    "\0\u3300\0\u3333\0\231\0\u3366";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\6"+
    "\1\12\1\13\1\4\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\6\1\23\1\24\1\6\1\25\1\26"+
    "\1\27\1\30\1\31\1\6\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\3\6\1\40\1\41\3\6\1\42\1\43"+
    "\3\6\1\44\2\6\1\3\1\6\1\45\1\6\1\7"+
    "\1\6\1\7\1\6\1\12\1\3\1\6\1\3\1\46"+
    "\1\16\1\47\1\50\1\6\1\51\2\6\1\52\1\24"+
    "\3\6\1\53\1\6\1\54\1\6\1\55\1\56\1\57"+
    "\7\6\1\41\13\6\64\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\47\6\1\0\1\6\1\0\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\0\1\6\1\0\32\7"+
    "\1\6\14\7\1\0\1\6\1\0\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\0\1\6\1\60\32\7\1\6"+
    "\14\7\1\0\1\6\1\0\4\6\1\61\1\62\1\0"+
    "\1\6\1\0\47\6\12\0\2\63\61\0\1\63\51\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\6\6\1\64"+
    "\4\6\1\65\1\6\1\66\3\6\1\67\25\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\16\6\1\70"+
    "\30\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\1\71\3\6\1\72\2\6\1\73\3\6\1\74\2\6"+
    "\1\75\2\6\1\76\25\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\1\77\3\6\1\100\42\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\13\6\1\101"+
    "\33\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\4\6\1\102\3\6\1\103\5\6\1\104\30\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\3\6\1\105"+
    "\10\6\1\106\1\107\13\6\1\110\15\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\24\6\1\111\22\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\16\6"+
    "\1\112\30\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\16\6\1\113\30\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\16\6\1\114\5\6\1\115\22\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\17\6"+
    "\1\116\1\6\1\117\25\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\1\120\7\6\1\121\36\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\1\122\3\6"+
    "\1\123\42\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\4\6\1\124\3\6\1\125\12\6\1\126\23\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\4\6"+
    "\1\127\3\6\1\130\5\6\1\131\30\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\21\6\1\132\1\133"+
    "\24\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\10\6\1\134\36\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\7\6\1\135\37\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\40\6\1\136\6\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\42\6\1\137"+
    "\4\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\43\6\1\140\3\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\21\6\1\67\25\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\1\71\3\6\1\72\2\6"+
    "\1\73\6\6\1\141\30\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\1\142\3\6\1\100\42\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\10\6\1\143"+
    "\36\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\14\6\1\106\14\6\1\110\15\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\16\6\1\125\30\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\10\6\1\121"+
    "\36\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\1\122\46\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\10\6\1\125\12\6\1\126\23\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\4\6\1\144\42\6"+
    "\1\0\1\6\1\0\5\6\1\145\1\0\1\6\1\0"+
    "\47\6\1\0\1\6\1\0\4\6\1\61\1\146\1\0"+
    "\1\6\1\0\47\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\21\6\1\147\25\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\10\6\1\150\36\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\3\6\1\117"+
    "\17\6\1\151\23\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\4\6\1\152\42\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\23\6\1\153\23\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\14\6\1\154"+
    "\32\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\15\6\1\155\31\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\4\6\1\156\42\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\1\157\46\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\13\6\1\160\1\161"+
    "\1\162\31\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\4\6\1\163\42\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\21\6\1\164\1\6\1\165\23\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\21\6"+
    "\1\166\25\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\10\6\1\167\36\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\2\6\1\170\44\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\2\6\1\171\10\6"+
    "\1\172\33\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\21\6\1\173\25\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\1\174\46\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\3\6\1\175\43\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\20\6\1\176"+
    "\26\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\22\6\1\177\24\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\6\6\1\200\40\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\3\6\1\201\43\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\14\6\1\202"+
    "\6\6\1\117\23\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\4\6\1\203\42\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\2\6\1\204\44\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\21\6\1\205"+
    "\1\206\24\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\15\6\1\164\31\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\3\6\1\207\43\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\20\6\1\210\26\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\13\6"+
    "\1\211\33\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\1\212\46\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\14\6\1\213\12\6\1\214\17\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\23\6\1\215"+
    "\23\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\13\6\1\105\33\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\24\6\1\216\22\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\22\6\1\217\24\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\4\6\1\220"+
    "\42\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\42\6\1\221\4\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\40\6\1\221\6\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\41\6\1\222\5\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\14\6\1\223"+
    "\32\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\21\6\1\164\25\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\2\6\1\171\44\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\27\6\1\214\17\6\1\0"+
    "\1\6\1\0\4\6\1\61\1\224\1\0\1\6\1\0"+
    "\47\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\4\6\1\225\42\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\15\6\1\226\31\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\10\6\1\227\36\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\1\230\46\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\16\6"+
    "\1\231\30\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\17\6\1\232\27\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\23\6\1\233\23\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\2\6\1\234\44\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\22\6"+
    "\1\235\24\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\24\6\1\236\22\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\1\6\1\237\15\6\1\240\27\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\22\6"+
    "\1\241\24\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\1\242\2\6\1\243\43\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\12\6\1\244\34\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\16\6\1\245"+
    "\30\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\4\6\1\246\42\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\14\6\1\247\32\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\7\6\1\213\37\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\7\6\1\250"+
    "\37\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\1\251\46\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\14\6\1\252\32\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\6\6\1\253\40\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\10\6\1\254\36\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\24\6"+
    "\1\255\22\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\23\6\1\256\23\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\10\6\1\257\36\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\10\6\1\260\36\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\1\6"+
    "\1\261\45\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\25\6\1\262\21\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\10\6\1\263\36\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\1\264\46\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\22\6\1\265"+
    "\24\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\10\6\1\237\36\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\24\6\1\266\22\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\4\6\1\267\42\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\15\6\1\270"+
    "\31\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\1\271\46\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\23\6\1\232\23\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\24\6\1\272\22\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\1\273\46\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\10\6\1\274"+
    "\36\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\21\6\1\275\25\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\40\6\1\276\6\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\1\6\1\237\45\6\1\0"+
    "\1\6\1\0\3\6\1\277\1\61\1\300\1\0\1\6"+
    "\1\0\47\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\6\6\1\301\40\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\4\6\1\302\42\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\6\6\1\303\40\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\15\6"+
    "\1\304\31\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\16\6\1\230\30\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\21\6\1\305\25\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\12\6\1\306\34\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\4\6"+
    "\1\105\42\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\14\6\1\307\32\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\16\6\1\304\30\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\16\6\1\310\30\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\24\6"+
    "\1\311\22\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\2\6\1\312\16\6\1\313\25\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\4\6\1\314\42\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\22\6"+
    "\1\131\24\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\2\6\1\315\44\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\10\6\1\316\36\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\4\6\1\317\42\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\22\6"+
    "\1\105\24\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\24\6\1\320\22\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\4\6\1\231\42\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\2\6\1\235\44\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\10\6"+
    "\1\321\36\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\10\6\1\322\36\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\15\6\1\313\31\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\5\6\1\323\41\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\21\6"+
    "\1\324\25\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\16\6\1\325\30\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\16\6\1\326\30\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\14\6\1\327\32\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\26\6"+
    "\1\330\20\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\4\6\1\331\42\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\2\6\1\332\44\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\3\6\1\333\43\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\13\6"+
    "\1\334\33\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\21\6\1\335\25\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\1\6\1\336\45\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\4\6\1\131\42\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\34\6"+
    "\1\337\12\6\1\0\1\6\1\0\5\6\1\340\1\0"+
    "\1\6\1\0\47\6\1\0\1\6\1\0\4\6\1\61"+
    "\1\300\1\0\1\6\1\0\47\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\1\341\46\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\1\342\46\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\24\6\1\334"+
    "\22\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\16\6\1\343\30\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\1\6\1\344\45\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\15\6\1\172\31\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\15\6\1\345"+
    "\31\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\13\6\1\346\33\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\10\6\1\347\36\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\15\6\1\350\31\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\7\6\1\351"+
    "\37\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\15\6\1\352\31\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\21\6\1\237\25\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\13\6\1\353\33\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\4\6\1\354"+
    "\42\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\5\6\1\355\41\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\10\6\1\356\36\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\4\6\1\271\42\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\15\6\1\357"+
    "\31\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\4\6\1\360\42\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\16\6\1\361\30\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\21\6\1\362\25\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\23\6\1\131"+
    "\23\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\1\363\46\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\16\6\1\271\30\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\10\6\1\364\36\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\13\6\1\235\33\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\40\6"+
    "\1\365\6\6\1\0\1\6\1\0\3\6\1\366\1\6"+
    "\1\367\1\0\1\6\1\0\47\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\21\6\1\370\25\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\2\6\1\371"+
    "\44\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\16\6\1\372\30\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\4\6\1\373\42\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\23\6\1\374\23\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\16\6\1\375"+
    "\30\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\2\6\1\376\44\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\1\343\46\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\1\377\46\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\1\u0100\46\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\21\6\1\u0101\25\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\10\6"+
    "\1\u0102\36\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\2\6\1\u0103\44\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\4\6\1\251\42\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\23\6\1\u0104\23\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\21\6"+
    "\1\u0105\25\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\10\6\1\u0106\36\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\21\6\1\244\25\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\16\6\1\313\30\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\45\6"+
    "\1\u0107\1\6\1\0\1\6\1\0\5\6\1\u0108\1\0"+
    "\1\6\1\0\47\6\1\0\1\6\1\0\3\6\1\366"+
    "\2\6\1\0\1\6\1\0\47\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\10\6\1\u0109\36\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\27\6\1\304"+
    "\17\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\15\6\1\u010a\31\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\1\u010b\46\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\15\6\1\271\31\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\10\6\1\u010c\36\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\21\6"+
    "\1\313\25\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\21\6\1\u010d\25\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\3\6\1\351\43\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\2\6\1\u010e\44\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\1\242"+
    "\46\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\21\6\1\u010f\25\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\3\6\1\271\43\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\3\6\1\u0110\43\6\1\0"+
    "\1\6\1\0\6\6\1\0\1\6\1\0\46\6\1\u0111"+
    "\1\0\1\6\1\0\5\6\1\u0112\1\0\1\6\1\0"+
    "\47\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\16\6\1\u0113\30\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\23\6\1\u0114\23\6\1\0\1\6\1\0"+
    "\6\6\1\0\1\6\1\0\21\6\1\131\1\u0115\24\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\1\u0116"+
    "\46\6\1\0\1\6\1\0\6\6\1\0\1\6\1\0"+
    "\10\6\1\262\36\6\1\0\1\6\1\0\6\6\1\0"+
    "\1\6\1\0\1\u0117\46\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\16\6\1\u0118\30\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\16\6\1\105\30\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\35\6"+
    "\1\u0119\11\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\15\6\1\105\31\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\4\6\1\370\42\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\13\6\1\u011a\33\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\21\6"+
    "\1\343\25\6\1\0\1\6\1\0\6\6\1\0\1\6"+
    "\1\0\22\6\1\u011b\24\6\1\0\1\6\1\0\6\6"+
    "\1\0\1\6\1\0\36\6\1\u011c\10\6\1\0\1\6"+
    "\1\0\6\6\1\0\1\6\1\0\4\6\1\u0118\42\6"+
    "\1\0\1\6\1\0\6\6\1\0\1\6\1\0\44\6"+
    "\1\221\2\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13209];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\37\1\1\11\12\1\1\11"+
    "\2\1\1\11\351\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //en este caso el Token anterior te ser√° √∫til aqu√≠ para saber si debes enviar o no al otro estado, dicho lexema lo obtendr√°s del contenido del token
    //si el token es null, entonces no env√≠es aunque en realidad el que sucediera esto, indica que hay un error de sintazis xD
    boolean estaEnYYINITIAL = true;//para qu√© era esto??? :v :| xD aaah, es para saber si al estar en alfa#, se debe dar el # que le representa √≥ el # del token con el que coincide... xD
    boolean sonConsultas = false;//esto es para saber si se debe entrar a valores, cuando se encuentre una " y antes de ella : xD
    Token tokenAnterior;
    ManejadorErrores manejadorErrores = new ManejadorErrores();

    private Symbol simbolo(int tipo){//empleado por tema, alineaci√≥n, requerido y clase, por el momento xD
        Token tokenActual = new Token("", yytext(), tokenAnterior, yyline+1, yycolumn+1);

        if(tokenAnterior!=null){
            tokenAnterior.establecerSiguiente(tokenActual);
        }

        tokenAnterior = tokenActual;//por esto, ya no es necesario tener el m√©todo a√±adirAnterior... pues se puede revisar directamente esta var de tipo Token... xD
        return new Symbol(tipo, tokenActual);
    }//Por el hecho de que a√∫n no tenemos la clase symb xD

    private int darTipoAlfaNum(){
        if(estaEnYYINITIAL){
            if(yytext().equalsIgnoreCase("ini")){
                return 2;//el # de ini
            }
            else if(yytext().equalsIgnoreCase("solicitud")){
                return 3;//el # de solicitud
            }else if(yytext().equalsIgnoreCase("solicitudes")){
                return 4;//el # de solicitudes
            }else if(yytext().equalsIgnoreCase("fin")){//puesto que pueden haber m√°s formas entonces por eso s√≠ especifico xD
                return 5;//el # de fin
            }
        }
        return 59;//aqu√≠ el # que corresponde al alfa#
    }
    
    public ManejadorErrores darManejadorErrores(){
        return manejadorErrores;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Parser_IndigoSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { manejadorErrores.establecerErrorDeToken("lexico", (Token)simbolo(1).value);/*caracter no aceptado*/
            }
            // fall through
          case 27: break;
          case 2:
            { System.out.println(yytext());
                                                            if(sonConsultas == true)
                                                            yybegin(VALORES);
                                                            else
                                                            return simbolo(yytext().equals("!")?ADMIRACION:(yytext().equals(">")?MAYOR:(yytext().equals("<")?MENOR:(yytext().equals("=")?IGUAL:(yytext().equals("<>")?DIFERENTE:(yytext().equals("<=")?MENORIGUAL:MAYORIGUAL))))));
            }
            // fall through
          case 28: break;
          case 3:
            { estaEnYYINITIAL = false; 
                                                            if(tokenAnterior.darLexema().equals(":") && !sonConsultas)/*coloqu√© esto as√≠, porque los √∫nicos que est√°n encerrados etrne " que tienen : como token anterior, son los par√°metros o valores de especificaci√≥n xD*/
                                                                yybegin(VALORES);
                                                            else 
                                                                return simbolo(COMILLA);
            }
            // fall through
          case 29: break;
          case 4:
            { System.out.println(yytext());/*se agreg√≥ a :, por el eje del aux, espero no de problemas... no deber√≠a xD pero por lo que observ√©, los estados internos tb pueden emplear las palrbas iniciales del estado que los engloba... o esos : que aparecieron fueron porque estaban "errados"?... fmmm xD*/
                                                                                                 return simbolo(darTipoAlfaNum());
            }
            // fall through
          case 30: break;
          case 5:
            { System.out.println(yytext());
                                                                                                 return simbolo(IDENTIFICADOR);
            }
            // fall through
          case 31: break;
          case 6:
            { System.out.println(yytext());
                                                                                      return simbolo(yytext().equals(":")?DOSPUNTOS:(yytext().equals("->")?ASIGNAR:(yytext().equals(",")?COMA:MENOS)));
            }
            // fall through
          case 32: break;
          case 7:
            { System.out.println(yytext());
                                                                                                 return simbolo(NUMERO);
            }
            // fall through
          case 33: break;
          case 8:
            { System.out.println(yytext());
                                                                                      return simbolo(yytext().equals("[")?APERTURAANGULAR:(yytext().equals("]")?CIERREANGULAR:(yytext().equals("{")?APERTURALLAVE:CIERRELLAVE)));
            }
            // fall through
          case 34: break;
          case 9:
            { return simbolo(GUIONBAJO);
            }
            // fall through
          case 35: break;
          case 10:
            { estaEnYYINITIAL = true; yybegin(YYINITIAL);
            }
            // fall through
          case 36: break;
          case 11:
            { return simbolo(yytext().equals("ID")?ID:(yytext().equals("CLASE")?CLASE:(yytext().equals("INDICE")?INDICE:(yytext().equals("VISIBLE")?VISIBLE:(yytext().equals("ALINEACION")?ALINEACION:(yytext().equals("REQUERIDO")?REQUERIDO:(yytext().equals("OPCIONES")?OPCIONES:(yytext().equals("FILAS")?FILAS:(yytext().equals("COLUMNAS")?COLUMNAS:URL)))))))));
            }
            // fall through
          case 37: break;
          case 12:
            { System.out.println(yytext());
                                                                                      return simbolo(TIPOREQUERIDO);
            }
            // fall through
          case 38: break;
          case 13:
            { return simbolo(yytext().equals("AND")?AND:(yytext().equals("OR")?OR:NOT));
            }
            // fall through
          case 39: break;
          case 14:
            { return simbolo((yytext().equals("CONSULTAR")?CONSULTAR:(yytext().equals("DATOS")?DATOS:(yytext().equals("SELECT")?SELECT:yytext().equals("TO")?TO:(yytext().equals("FORM")?FORM:(yytext().equals("WHERE")?WHERE:CONSULTA))))));
            }
            // fall through
          case 40: break;
          case 15:
            { System.out.println(yytext());
                                                                                      return simbolo(yytext().equals("ini")?INI:(yytext().equals("solicitud")?SOLICITUD:(yytext().equals("solicitudes")?SOLICITUDES:FIN)));
            }
            // fall through
          case 41: break;
          case 16:
            { return simbolo(yytext().equals("CAMPO")?CAMPO:(yytext().equals("TEXTO")?TEXTO:AREA));
            }
            // fall through
          case 42: break;
          case 17:
            { return simbolo(TIPOTEMA);
            }
            // fall through
          case 43: break;
          case 18:
            { return simbolo(yytext().equals("PASSWORD")?PASSWORD:(yytext().equals("FECHA")?FECHA:(yytext().equals("CREACION")?CREACION:(yytext().equals("ANTIGUO")?ANTIGUO:(yytext().equals("MODIFICACION")?MODIFICACION:(yytext().equals("TITULO")?TITULO:(yytext().equals("NOMBRE")?NOMBRE:TEMA)))))));
            }
            // fall through
          case 44: break;
          case 19:
            { return simbolo(TIPOCLASE);
            }
            // fall through
          case 45: break;
          case 20:
            { return simbolo((yytext().equals("CREAR")?CREAR:(yytext().equals("USUARIO")?USUARIO:(yytext().equals("MODIFICAR")?MODIFICAR:(yytext().equals("ELIMINAR")?ELIMINAR:LOGIN)))));
            }
            // fall through
          case 46: break;
          case 21:
            { return simbolo(yytext().equals("NUEVO")?NUEVO:(yytext().equals("FORMULARIO")?FORMULARIO:TEMA));
            }
            // fall through
          case 47: break;
          case 22:
            { System.out.println(yytext());
                                                                                      return simbolo(TIPOALINEACION);
            }
            // fall through
          case 48: break;
          case 23:
            { return simbolo(yytext().equals("AGREGAR")?AGREGAR:COMPONENTE);
            }
            // fall through
          case 49: break;
          case 24:
            { System.out.println(yytext());
                                                                                                 return simbolo(FORMATOFECHA);
            }
            // fall through
          case 50: break;
          case 25:
            { sonConsultas = true; return simbolo(CONSULTAS);
            }
            // fall through
          case 51: break;
          case 26:
            { sonConsultas = false; return simbolo((yytext().equals("CREDENCIALES")?CREDENCIALES:PARAMETROS));
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
